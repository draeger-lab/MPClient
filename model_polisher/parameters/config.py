# coding: utf-8

"""
    Model Polisher API

    API for the Model Polisher.  # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Config(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_model_to_be_saved_on_server': 'object',
        'sbml_validation': 'object',
        'sbo_terms': 'ConfigSboTerms',
        'polishing': 'ConfigPolishing',
        'annotation': 'ConfigAnnotation',
        'output': 'object'
    }

    attribute_map = {
        'allow_model_to_be_saved_on_server': 'allowModelToBeSavedOnServer',
        'sbml_validation': 'sbmlValidation',
        'sbo_terms': 'sboTerms',
        'polishing': 'polishing',
        'annotation': 'annotation',
        'output': 'output'
    }

    def __init__(self, allow_model_to_be_saved_on_server=None, sbml_validation=None, sbo_terms=None, polishing=None, annotation=None, output=None):  # noqa: E501
        """Config - a model defined in Swagger"""  # noqa: E501
        self._allow_model_to_be_saved_on_server = None
        self._sbml_validation = None
        self._sbo_terms = None
        self._polishing = None
        self._annotation = None
        self._output = None
        self.discriminator = None
        if allow_model_to_be_saved_on_server is not None:
            self.allow_model_to_be_saved_on_server = allow_model_to_be_saved_on_server
        if sbml_validation is not None:
            self.sbml_validation = sbml_validation
        if sbo_terms is not None:
            self.sbo_terms = sbo_terms
        if polishing is not None:
            self.polishing = polishing
        if annotation is not None:
            self.annotation = annotation
        if output is not None:
            self.output = output

    @property
    def allow_model_to_be_saved_on_server(self):
        """Gets the allow_model_to_be_saved_on_server of this Config.  # noqa: E501


        :return: The allow_model_to_be_saved_on_server of this Config.  # noqa: E501
        :rtype: object
        """
        return self._allow_model_to_be_saved_on_server

    @allow_model_to_be_saved_on_server.setter
    def allow_model_to_be_saved_on_server(self, allow_model_to_be_saved_on_server):
        """Sets the allow_model_to_be_saved_on_server of this Config.


        :param allow_model_to_be_saved_on_server: The allow_model_to_be_saved_on_server of this Config.  # noqa: E501
        :type: object
        """

        self._allow_model_to_be_saved_on_server = allow_model_to_be_saved_on_server

    @property
    def sbml_validation(self):
        """Gets the sbml_validation of this Config.  # noqa: E501


        :return: The sbml_validation of this Config.  # noqa: E501
        :rtype: object
        """
        return self._sbml_validation

    @sbml_validation.setter
    def sbml_validation(self, sbml_validation):
        """Sets the sbml_validation of this Config.


        :param sbml_validation: The sbml_validation of this Config.  # noqa: E501
        :type: object
        """

        self._sbml_validation = sbml_validation

    @property
    def sbo_terms(self):
        """Gets the sbo_terms of this Config.  # noqa: E501


        :return: The sbo_terms of this Config.  # noqa: E501
        :rtype: ConfigSboTerms
        """
        return self._sbo_terms

    @sbo_terms.setter
    def sbo_terms(self, sbo_terms):
        """Sets the sbo_terms of this Config.


        :param sbo_terms: The sbo_terms of this Config.  # noqa: E501
        :type: ConfigSboTerms
        """

        self._sbo_terms = sbo_terms

    @property
    def polishing(self):
        """Gets the polishing of this Config.  # noqa: E501


        :return: The polishing of this Config.  # noqa: E501
        :rtype: ConfigPolishing
        """
        return self._polishing

    @polishing.setter
    def polishing(self, polishing):
        """Sets the polishing of this Config.


        :param polishing: The polishing of this Config.  # noqa: E501
        :type: ConfigPolishing
        """

        self._polishing = polishing

    @property
    def annotation(self):
        """Gets the annotation of this Config.  # noqa: E501


        :return: The annotation of this Config.  # noqa: E501
        :rtype: ConfigAnnotation
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """Sets the annotation of this Config.


        :param annotation: The annotation of this Config.  # noqa: E501
        :type: ConfigAnnotation
        """

        self._annotation = annotation

    @property
    def output(self):
        """Gets the output of this Config.  # noqa: E501


        :return: The output of this Config.  # noqa: E501
        :rtype: object
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this Config.


        :param output: The output of this Config.  # noqa: E501
        :type: object
        """

        self._output = output

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Config, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Config):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
