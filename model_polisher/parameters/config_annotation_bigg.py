# coding: utf-8

"""
    Model Polisher API

    API for the Model Polisher.  # noqa: E501

    OpenAPI spec version: 2.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConfigAnnotationBigg(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'annotate_with_bigg': 'object',
        'include_any_uri': 'object',
        'document_title_pattern': 'object',
        'notes': 'ConfigAnnotationBiggNotes'
    }

    attribute_map = {
        'annotate_with_bigg': 'annotateWithBigg',
        'include_any_uri': 'includeAnyUri',
        'document_title_pattern': 'documentTitlePattern',
        'notes': 'notes'
    }

    def __init__(self, annotate_with_bigg=None, include_any_uri=None, document_title_pattern=None, notes=None):  # noqa: E501
        """ConfigAnnotationBigg - a model defined in Swagger"""  # noqa: E501
        self._annotate_with_bigg = None
        self._include_any_uri = None
        self._document_title_pattern = None
        self._notes = None
        self.discriminator = None
        if annotate_with_bigg is not None:
            self.annotate_with_bigg = annotate_with_bigg
        if include_any_uri is not None:
            self.include_any_uri = include_any_uri
        if document_title_pattern is not None:
            self.document_title_pattern = document_title_pattern
        if notes is not None:
            self.notes = notes

    @property
    def annotate_with_bigg(self):
        """Gets the annotate_with_bigg of this ConfigAnnotationBigg.  # noqa: E501


        :return: The annotate_with_bigg of this ConfigAnnotationBigg.  # noqa: E501
        :rtype: object
        """
        return self._annotate_with_bigg

    @annotate_with_bigg.setter
    def annotate_with_bigg(self, annotate_with_bigg):
        """Sets the annotate_with_bigg of this ConfigAnnotationBigg.


        :param annotate_with_bigg: The annotate_with_bigg of this ConfigAnnotationBigg.  # noqa: E501
        :type: object
        """

        self._annotate_with_bigg = annotate_with_bigg

    @property
    def include_any_uri(self):
        """Gets the include_any_uri of this ConfigAnnotationBigg.  # noqa: E501


        :return: The include_any_uri of this ConfigAnnotationBigg.  # noqa: E501
        :rtype: object
        """
        return self._include_any_uri

    @include_any_uri.setter
    def include_any_uri(self, include_any_uri):
        """Sets the include_any_uri of this ConfigAnnotationBigg.


        :param include_any_uri: The include_any_uri of this ConfigAnnotationBigg.  # noqa: E501
        :type: object
        """

        self._include_any_uri = include_any_uri

    @property
    def document_title_pattern(self):
        """Gets the document_title_pattern of this ConfigAnnotationBigg.  # noqa: E501


        :return: The document_title_pattern of this ConfigAnnotationBigg.  # noqa: E501
        :rtype: object
        """
        return self._document_title_pattern

    @document_title_pattern.setter
    def document_title_pattern(self, document_title_pattern):
        """Sets the document_title_pattern of this ConfigAnnotationBigg.


        :param document_title_pattern: The document_title_pattern of this ConfigAnnotationBigg.  # noqa: E501
        :type: object
        """

        self._document_title_pattern = document_title_pattern

    @property
    def notes(self):
        """Gets the notes of this ConfigAnnotationBigg.  # noqa: E501


        :return: The notes of this ConfigAnnotationBigg.  # noqa: E501
        :rtype: ConfigAnnotationBiggNotes
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ConfigAnnotationBigg.


        :param notes: The notes of this ConfigAnnotationBigg.  # noqa: E501
        :type: ConfigAnnotationBiggNotes
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigAnnotationBigg, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigAnnotationBigg):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
